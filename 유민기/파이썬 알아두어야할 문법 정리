input() = 한줄의 문자열을 입력받는 함수
map() = 리스트의 모든 원소에 각각 특정한 함수를 적용할 때 사용
공백을 기준으로 구분된 데이터를 입력받을 때 다음과 같이 사용한다
ex) list(map(int, input().split()))
-----------------------------------------------
sys.stdin.readline().rstrip()매서드를 활용하면 입력값을 빠르게 받을 수 있다. -> 시간초과가 날경우 이렇게해서 입력시간을 줄일 수 있음.
rstrip()을 사용하는 이유는 입력 후 엔터가 줄바꿈으로 입력되기 때문이다
-----------------------------------------------
str() -> 정수형 데이터를 문자열로 바꿀 때 사용
ex) answer = 7
    print("정답은 " + str(answer) + "입니다.")

이 방법외에도  f-string을 활용하여 바꿀 수 도 있음
ex) answer = 7
    print(f"정답은 {answer}입니다.")
-----------------------------------------------
pass 키워드
아무것도 처리하고 싶지 않을 때 pass 키워드를 사용할 수 있다.
ex) 디버깅 과정에서 조건문의 형태만 만들어 놓고 조건문을 처리하는 부분은 비워놓고 싶은 경우
score = 85
if score >= 80:
    pass #나중에 작설할 소스코드
else:
    print("80점 이하")
print("종료")

-----------------------------------------------
조건문의 간소화
조건문에서 실행될 소스코드가 한줄일 경우에는 줄바꿈을 하지 않고도 간략하게 표현할 수 있다.
score = 85
if score >= 80: result = "Success"
else: result = "Fail"
-----------------------------------------------
조건부 표현식은 if~else문을 한줄에 작성할 수 있도록 해줍니다.
score = 85
result = "Success" if score >= 80 else "Fail"
print(result)
-> 주의할 점은 if문을 기준으로 왼쪽이 참, 오른쪽이 거짓이다.
-----------------------------------------------
range() -> 연속적인 값을 차례대로 순회할 때 사용
    이때 range(시작값, 끝값+1)형태로 사용한다.
    인자를 하나만 넣으면 자동으로 시작값은 0이된다.
-----------------------------------------------
continue -> 반복문에서 남은 코드의 실행을 건너뛰고, 다음 반복을 진행하고자 할 때 사용한다.
ex) score = [90, 85, 77, 65, 41]
    cheating_student_list = {2, 4}
    for i in range(5):
        if i+1 in cheating_student_list:
            continue #부정행위를 한 학생은 제외되도록 함
        if score[i] >= 80:
            print(i+1, "번 학생은 합격입니다.")
-----------------------------------------------
break -> 반복문을 즉시 탈출하고 싶을 때 사용
ex) i=1
    while True:
        print("현재 i의 값:", i)
        if i == 5:
            break
        i += 1

-----------------------------------------------
중첩된 반복문 사용하는 법(예제 : 구구단)
ex) for i in range(2, 10):
        for j in range(1,10):
            print(i, "X", j, = "=", i*j)
        print()

-----------------------------------------------
함수란?
특정한 작업을 하나의 단위로 묶어놓은 것을 의미
함수를 사용하면 소스코드의 반복을 줄일 수 있다.
-----------------------------------------------
내장함수 : 파이썬에서 기본적으로 제공하는 함수
사용자 정의함수 : 개발자가 직접 정의하여 사용하는 함수
-> 매개변수 : 함수내부에서 사용할 변수
    반환값 : 함수에서 처리된 결과를 반환
"""     def 함수명(매개변수):
        실행할 소스코드
        return 반환 값"""
ex) def(a,b):
        return a + b
    print(add(3,7))
-----------------------------------------------
global 키워드 -> 함수 바깥에 선언된 변수를 바로참조
ex) a = 0 #함수 바깥에 선언된 변수
    def func():
        global a #함수 바깥에 선언된 변수 a를 가져옴
        a += 1
    for i in range(10):
        func()
    print(a)
-----------------------------------------------
파이썬은 다른 언어와 달리 여러개의 반환값을 가질 수 있다.
-----------------------------------------------
람다 표현식 -> 함수를 간단하게 작성할 수 있다.
특정한 기능을 수행하는 함수를 한 줄에 작성할 수 있다.
람다 표현식의 예시1
ex) def add(a,b):
        return a + b
    print(add(3,7)) #일반적인 add()매서드 사용
-----------------------------------------------
위 코드를 람다식으로 표현하면 한줄로 표현할 수 있다. 이처럼 구현하면 코드의 길이를 줄일 수 있다.
print((lambda a,b: a+b)(3,7))#람다 표현식으로 구현한 add()매서드
-----------------------------------------------
람다 표현식의 예시2
array = [('홍길동', 50), ('이순신', 32), ('이무개', 74)]
def my_key(x):
    return x[1] #정렬 기준을 두번째를 기준으로 한다.
print(sorted(array, key = mey_key))
-----------------------------------------------
위 코드를 람다식으로 한줄로 다음과 같이 표현할 수 있다.
print(sorted(array, key = lambda x: x[1]))
-----------------------------------------------
람다 표현식의 예시3
list1 = [1,2,3,4,5]
list2 = [6,7,8,9,10]
result = map(lambda a,b: a+b, list1,list2)
print(list(result))
-----------------------------------------------
